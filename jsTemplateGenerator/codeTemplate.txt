module.exports =(dbName)=>{
    var Promise = require('bluebird');
    var knex = require('knex')({client: "mysql"});
    var #%TableName%#Model=require('basicModel')(dbName, '#%TableName%#',{});

   return {
       get#%TableName%#JoinList(filter, page, pageSize){
           logger.enter("enter get#%TableName%#JoinList");

           let count = knex.raw('#!@ForeignKey@ count({{data.Table}}.{{data.ForeignTableKey}}) AS count{{data.Table}},!#'+
           '#!@MappingKey@ count({{data.MiddleTable}}.{{data.MiddleKey}}) AS count{{data.MiddleTable}},!#'.replace(/(.*)[,]$/, '$1'));

           let column = ["#%TableName%#.*", count];

           let whereRaw={};
           _.each(filter, (field,key)=>{
               whereRaw[`#%TableName%#.${key}`]=field;
           })

           return knex.withSchema(dbName)
               .table("#%TableName%#")
               .select(column)
               #!@ForeignKey@
                   .leftJoin(dbName + '.{{data.Table}}', function () {
                       this.on('#%TableName%#.{{data.ThisTableKey}}', '=', '{{data.Table}}.{{data.ForeignTableKey}}');
                   })
               !#
               #!@MappingKey@
                   .leftJoin(dbName + '.{{data.MiddleTable}}', function () {
                       this.on('#%TableName%#.{{data.ThisTableKey}}', '=', '{{data.MiddleTable}}.{{data.MiddleKey}}');
                   })
               !#
               .where(whereRaw)
               .groupBy('#%UniqueKey%#')
               .orderBy('#%TableName%#.updatedOn', 'desc')
               .limit(pageSize)
               .offset((page - 1) * pageSize)
               .debug()
               .then(function(data){
                   return data;
               })
       },
       get#%TableName%#DetailById(Id){
           logger.enter("enter get#%TableName%#DetailById");

           return knex.withSchema(dbName)
                   .table("#%TableName%#")
                   .select("*")
                   .where("#%UniqueKey%# = '" + Id+ "'")
                   .debug()
                   .then(function(data){
                       //处理外键关系表
                       return getForeignTableInfo(dbName)
                       .then(function(res){
                          //TODO:处理res
                           return getMappingTableInfo(dbName)
                           .then(function(result){
                               //TODO:处理result
                           })
                       })
                   })

       },
       get#%TableName%#SimpleDetail(fieldName, Id){
           logger.enter("enter get#%TableName%#SimpleDetail");

           return #%TableName%#Model.getSimpleDetail(fieldName, Id);
       },
       get#%TableName%#FieldById(Id, FieldName){
           logger.enter("enter get#%TableName%#FieldById");

           return knex.withSchema(dbName)
                   .table("#%TableName%#")
                   .select(FieldName)
                   .where("#%UniqueKey%# = '" + Id+ "'")
                   .debug()
                   .then(function(data){
                       return data;
                   })
       },
       add#%TableName%#(data){
           logger.enter("enter add#%TableName%#");

           return knex.transaction((trx)=>{
               Promise.all([
                   //添加 #%TableName%# 数据
                   #%TableName%#Model.addData(data.#%TableName%#Data, trx),
                   #^@ForeignKey@
                       #!@ForeignKey@
                            //添加 {{data.Table}} 数据
                            {{data.Table}}Model.addData(data.{{data.Table}}Data, trx),
                       !#
                   ^#
                   #^@MappingKey@
                       #!@MappingKey@
                            //添加 {{data.MiddleTable}} 数据
                            {{data.MiddleTable}}Model.addData(data.{{data.MiddleTable}}Data, trx),
                       !#
                   ^#
               ])
               .then(trx.commit)
               .catch(trx.rollback);
           })
       },
       put#%TableName%#ById(Id, data){
           logger.enter("put#%TableName%#ById");

           return knex.transaction((trx)=>{
                Promise.all([
                    //更新 #%TableName%# 数据
                    #%TableName%#Model.updateData(data.#%TableName%#Data, "Id", Id, trx),
                    #^@ForeignKey@
                        #!@ForeignKey@
                             //删除 {{data.Table}} 数据
                             {{data.Table}}Model.deleteData('{{data.ForeignTableKey}}', Id, trx),
                             //添加新 {{data.Table}} 数据
                             {{data.Table}}Model.addData(data.{{data.Table}}Data, trx),
                        !#
                    ^#
                    #^@MappingKey@
                        #!@MappingKey@
                             //删除 {{data.MiddleTable}} 数据
                             {{data.MiddleTable}}Model.deleteData('{{data.StudentId}}', Id, trx),
                             //添加新 {{data.MiddleTable}} 数据
                             {{data.MiddleTable}}Model.addData(data.{{data.MiddleTable}}Data, trx),
                        !#
                    ^#
                ])
                .then(trx.commit)
                .catch(trx.rollback);
           })
       },
       delete#%TableName%#ById(Id){
           logger.enter("enter delete#%TableName%#ById");

           return knex.transaction((trx)=>{
                Promise.all([
                    //删除 #%TableName%# 数据
                    #%TableName%#Model.deleteData(#%UniqueKey%#, Id, trx),
                    #^@ForeignKey@
                        #!@ForeignKey@
                             //删除 {{data.Table}} 数据
                             {{data.Table}}Model.deleteData('{{data.ForeignTableKey}}', Id, trx),
                        !#
                    ^#
                    #^@MappingKey@
                        #!@MappingKey@
                             //删除 {{data.MiddleTable}} 数据
                             {{data.MiddleTable}}Model.deleteData('{{data.StudentId}}', Id, trx),
                        !#
                    ^#
                ])
                .then(trx.commit)
                .catch(trx.rollback);
           })
       }
   }
}
getForeignTableInfo=(dbName)=>{
//处理外键关系表
    let foreignTables=[
    #!@ForeignKey@
        {
            tableName:'{{data.Table}}'
            ForeignTableKey:'{{data.ForeignTableKey}}'
        }
    !#
    ]

    return Promise.map(foreignTables, function(foreign){
        return knex.withSchema(dbName)
            .table(foreign[tableName)]
            .where(foreign[tableName] + "." + foreign[ForeignTableKey]+" = '" + Id + "'")
            .select("*")
            .debug()
            .then(function(result){
                return {
                    key: foreign[tableName] + "Info",
                    value: result
                }
            })
    })
}

getMappingTableInfo=(dbName)=>{
    //处理映射关系
    let mappingTables=[
    #!@MappingKey@
        {
            MiddleTable:'{{data.MiddleTable}}'    //映射关系表名
            MiddleKey:'{{data.MiddleKey}}'      //主表对应的Id
            MappingKey:'{{data.MappingKey}}'      //映射表对应的Id
            MappingTable:'{{data.MappingTable}}'        //映射表名
            MappingTableKey:'{{data.MappingTableKey}}'      //映射表Id
        }
    !#
    ]

    return Promise.map(mappingTables, function(mapping){
        return knex.withSchema(dbName)
            .table(mapping[MiddleTable])
            .leftJoin(dbName + '.' + mapping[MappingTable], function () {
                this.on(mapping[MiddleTable] + '.' + mapping[MappingKey], '=', mapping[MappingTable] + '.' + mapping[MappingTableKey]);
            })
            .where(mapping[MiddleTable] + "." + mapping[MiddleKey] + " = '" + Id + "'")
            .select(mapping[MappingTable] + ".*")
            .debug()
            .then(function(result){
                 return {
                    key: mapping[tableName] + "Info",
                    value: result
                };
            })
    })
}